/*
 * This Java source file was generated by the Gradle 'init' task.
 */
package com.daniil.triangle.demo;

import com.crazzyghost.alphavantage.AlphaVantage;
import com.crazzyghost.alphavantage.Config;
import com.crazzyghost.alphavantage.parameters.OutputSize;
import com.crazzyghost.alphavantage.timeseries.response.StockUnit;
import com.crazzyghost.alphavantage.timeseries.response.TimeSeriesResponse;
import com.daniil.triangle.demo.indicator.DemoTriangleIndicator;
import com.daniil.triangle.demo.strategy.DemoTriangleStrategyFromLowest;
import com.daniil.triangle.demo.strategy.DemoTriantleStrategy;

import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStreamReader;
import java.sql.Date;
import java.util.Comparator;
import java.util.List;
import java.util.stream.Collectors;

import static com.daniil.triangle.demo.utils.OutputFormatter.beautifyStockUnit;

public class App {
    public String getGreeting() {
        return "Hello World!";
    }

    public static void main(String[] args) {
        run();
    }

    private static void run() {
        BufferedReader reader = new BufferedReader(
                new InputStreamReader(System.in));

        String symbol = null;
        String startDate = null;
        String endDate = null;

        try {
            System.out.print("Введите символ (например, AAPL, NVDA или MBUU) -> ");
            symbol = reader.readLine();
            System.out.print("Введите дату начала графика (в формате гггг-ММ-дд, например 2020-07-20) -> ");
            startDate = reader.readLine();
            System.out.print("Введите дату окончания графика (в формате гггг-ММ-дд, например 2020-11-30) -> ");
            endDate = reader.readLine();
        } catch (IOException e) {
            System.out.println(e.getMessage());
        }

        System.out.println("Работаем...");

        Config cfg = Config.builder()
                .key("YADS86TG6YAFNDC1")
                .timeOut(10)
                .build();
        AlphaVantage.api().init(cfg);
        TimeSeriesResponse nvda = AlphaVantage.api()
                .timeSeries()
                .daily()
                .forSymbol(symbol)
                .outputSize(OutputSize.FULL)
                .fetchSync();

        String finalStartDate = startDate;
        String finalEndDate = endDate;

        List<StockUnit> stocksSelected = nvda
                .getStockUnits()
                .stream()
                .filter(stockUnit -> Date.valueOf(stockUnit.getDate()).after(Date.valueOf(finalStartDate)))
                .filter(stockUnit -> Date.valueOf(stockUnit.getDate()).before(Date.valueOf(finalEndDate)))
                .sorted(Comparator.comparing(StockUnit::getDate, Comparator.comparing(Date::valueOf)))
                .collect(Collectors.toList());

        DemoTriantleStrategy strategyFirstHi = new DemoTriantleStrategy();
        DemoTriangleStrategyFromLowest strategyFirstLow = new DemoTriangleStrategyFromLowest();
        List<DemoTriangleIndicator> firstHiDetected = strategyFirstHi.detect(stocksSelected);
        List<DemoTriangleIndicator> firstLowDetected = strategyFirstLow.detect(stocksSelected);

        if (firstHiDetected.size() == 0 && firstLowDetected.size() == 0) {
            System.out.println("--------------------");
            System.out.println("На указанном диапазоне для символа " + symbol + " не найдено треугольников");
            System.out.println("--------------------");

            return;
        }

        if (firstHiDetected.size() > 0) {
            System.out.println("--------------------");
            System.out.println("Для указанных дат для символа " + symbol + " найдены треугольники");
            System.out.println();
            printDetected(firstHiDetected);
            System.out.println("--------------------");
        }

        if (firstLowDetected.size() > 0) {
            System.out.println("--------------------");
            System.out.println("Для указанных дат для символа " + symbol + " найдены треугольники");
            System.out.println();
            printFirstLowDetected(firstLowDetected);
            System.out.println("--------------------");
        }

    }

    private static void printDetected(List<DemoTriangleIndicator> stocks) {
        for (DemoTriangleIndicator indicator : stocks) {
            List<StockUnit> candles = indicator.getData();

            System.out.println("Первая верхняя точка: " + beautifyStockUnit(candles.get(0)));
            System.out.println("Первая нижняя точка: " + beautifyStockUnit(candles.get(1)));
            System.out.println("Вторая верхняя точка: " + beautifyStockUnit(candles.get(2)));
            System.out.println("Вторая нижняя точка: " + beautifyStockUnit(candles.get(3)));
            System.out.println();
        }
    }

    private static void printFirstLowDetected(List<DemoTriangleIndicator> stocks) {
        for (DemoTriangleIndicator indicator : stocks) {
            List<StockUnit> candles = indicator.getData();

            System.out.println("Первая нижняя точка: " + beautifyStockUnit(candles.get(0)));
            System.out.println("Первая верхняя точка: " + beautifyStockUnit(candles.get(1)));
            System.out.println("Вторая нижняя точка: " + beautifyStockUnit(candles.get(2)));
            System.out.println("Вторая верхняя точка: " + beautifyStockUnit(candles.get(3)));
            System.out.println();
        }
    }

}
